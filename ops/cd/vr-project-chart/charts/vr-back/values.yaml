# This will set the replicaset count more information can be found here: https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/
replicaCount: 1

# This sets the container image more information can be found here: https://kubernetes.io/docs/concepts/containers/images/
image:
  repository: europe-west3-docker.pkg.dev/olehdevua-vr-nest/vr-nest-repo/vr-back
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: "latest"

# This is for the secrets for pulling an image from a private repository
# https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
imagePullSecrets:
  - name: gar-creds

# This is to override the chart name.
nameOverride: ""
fullnameOverride: ""

# This section builds out the service account more information can be found here: https://kubernetes.io/docs/concepts/security/service-accounts/
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

# This is for setting Kubernetes Annotations to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
podAnnotations: {}
# This is for setting Kubernetes Labels to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

# This is for setting up a service more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/
service:
  # https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
  type: ClusterIP
  # https://kubernetes.io/docs/concepts/services-networking/service/#field-spec-ports
  port: 80
  targetPort: 3000

# This block is for setting up the ingress
# https://kubernetes.io/docs/concepts/services-networking/ingress/
ingress:
  enabled: false
  # For GKE, you'll typically use annotations like `kubernetes.io/ingress.class: "gce"`
  # or `kubernetes.io/ingress.class: "gce-internal"`.
  # GKE documentation states that for versions 1.18+, you must use the annotation and not `spec.ingressClassName`
  # for GKE-managed Ingresses.
  # However, for non-GKE Ingress controllers running on GKE (like Nginx or Traefik you install yourself),
  # you would use `spec.ingressClassName`.
  # Since your primary goal for GKE is likely using its native Ingress, we'll cater to the annotation method,
  # but className can still be used if you deploy a custom controller.
  #
  # For k3s with Traefik, if Traefik is the default and configured to watch Ingresses without a class,
  # you might leave className empty.
  # If you need to be explicit or have multiple Ingress controllers,
  # you'd set it to traefik (or whatever class Traefik is configured to use).
  className: "" # IMPORTANT: Override per environment (GKE vs k3s)
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/ingress.class: gce
    # kubernetes.io/tls-acme: "true"
    # gke:
    #   kubernetes.io/ingress.global-static-ip-name: "your-static-ip-name" # Example GKE annotation
    #   networking.gke.io/managed-certificates: "your-managed-cert-name"
    # traefik:
    #   traefik.ingress.kubernetes.io/router.entrypoints: "websecure" # Example Traefik annotation
    #   traefik.ingress.kubernetes.io/router.tls: "true"
  hosts:
    - host: chart-example.local # Override with your actual domain
      paths:
        - path: /
          pathType: ImplementationSpecific # Or Prefix, Exact
          tls: [ ]
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources:
  limits:
    cpu: 200m
    memory: 512Mi
  requests:
    cpu: 200m
    memory: 256Mi

# https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
livenessProbe:
  httpGet:
    path: /health
    port: http
readinessProbe:
  httpGet:
    path: /health
    port: http

# This section is for setting up autoscaling more information can be found here: https://kubernetes.io/docs/concepts/workloads/autoscaling/
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: {}

tolerations: []

affinity: {}

# Environment variables
env:
  DATABASE_HOST: "postgresql-release.postgresql.svc.cluster.local"
  DATABASE_PORT: "5432"
  DATABASE_NAME: "vr-back"
  PINO_LOGGER_PRETTY: "true"
  PINO_LOGGER_LEVEL: "info"

# Secrets for database credentials
databaseCredentialsSecret: "pg-secret"
