services:
  vr-back:
    container_name: vr-back
    labels: { "project": "vr-nest", service: vr-back }
    build:
      context: ./vr-back
      dockerfile: Dockerfile
      tags:
        - vr-back:development
      target: development
    environment:
      DATABASE_HOST: ${DATABASE_HOST:-10.22.0.1}
      DATABASE_PORT: ${DATABASE_PORT:-5432}
      DATABASE_USER: ${DATABASE_USER:-vr}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD:-deadbeef}
      DATABASE_NAME: ${DATABASE_NAME:-vr-back}
      PINO_LOGGER_PRETTY: true
      PINO_LOGGER_LEVEL: 'debug'
    volumes:
      - ./vr-back/src:/home/node/app/src
      - ./vr-back/scripts:/home/node/app/scripts
#   depends_on:
#     - postgres
    command: npm run start:dev # Or start:prod for production build
    networks:
      vr: { ipv4_address: 10.22.10.1 }

  vr-postgres:
    container_name: vr-postgres
    labels: { "project": "vr-nest", service: vr-postgres }
    image: postgres:17-bookworm
    environment:
      POSTGRES_PASSWORD: postgres
      PGUSER: ${PGUSER:-postgres}
      PGHOST: ${PGHOST:-localhost}
      PGDATABASE: ${PGDATABASE:-postgres}
      PGPASSWORD: ${PGPASSWORD:-postgres}
    volumes:
      - vr_pg_data:/var/lib/postgresql/data
    network_mode: host

  pgadmin:
    image: dpage/pgadmin4
    environment:
      CONFIG_DATABASE_URI: postgresql://vr:deadbeef@postgres:5432/vr
      PGADMIN_DEFAULT_EMAIL: olehdevua@gmail.com
      PGADMIN_DEFAULT_PASSWORD: deadbeef
    networks:
      vr: { ipv4_address: 10.22.20.10 }

  kafka-0:
    build:
      context: ./ops/docker/kafka
      dockerfile: Dockerfile
    labels: { "project": "vr-nest", service: kafka }
    environment:
      KAFKA_ID: 0
    command: ["./bin/kafka-server-start.sh", "./config/server.properties"]
    volumes:
      - kafka-0:/opt/kafka-log-files
      - kafka-0-metadata:/opt/kafka-metadata-log-files
    networks:
      vr: { ipv4_address: 10.22.30.0 }
    depends_on: ["kafka-1", "kafka-2"]

  kafka-1:
    build:
      context: ./ops/docker/kafka
      dockerfile: Dockerfile
    labels: { "project": "vr-new", service: kafka }
    environment:
      KAFKA_ID: 1
    command: ["./bin/kafka-server-start.sh", "./config/server.properties"]
    volumes:
      - kafka-1:/opt/kafka-log-files
      - kafka-1-metadata:/opt/kafka-metadata-log-files
    networks:
      vr: { ipv4_address: 10.22.30.1 }
    depends_on: ["kafka-0", "kafka-2"]

  kafka-2:
    build:
      context: ./ops/docker/kafka
      dockerfile: Dockerfile
    labels: { "project": "vr-new", service: kafka }
    environment:
      KAFKA_ID: 2
    command: ["./bin/kafka-server-start.sh", "./config/server.properties"]
    volumes:
      - kafka-2:/opt/kafka-log-files
      - kafka-2-metadata:/opt/kafka-metadata-log-files
    networks:
      vr: { ipv4_address: 10.22.30.2 }
    depends_on: ["kafka-0", "kafka-1"]

  kconsole:
    container_name: kconsole
    image: docker.redpanda.com/redpandadata/console:latest
    labels: { "project": "vr-new", service: kafka }
    environment:
      KAFKA_BROKERS: kafka-0:9092,kafka-1:9092,kafka-2:9092
      SERVER_LISTENPORT: 8090
    networks:
      vr: { ipv4_address: 10.22.30.110 }
    depends_on: ["kafka-0", "kafka-1", "kafka-2"]

volumes:
  vr_pg_data:
    name: vr_pg_data
    labels: { "project": "vr-nest", service: vr-postgres }
  kafka-0:
    labels: { "project": "vr-nest", service: kafka }
  kafka-0-metadata:
    labels: { "project": "vr-nest", service: kafka }
  kafka-1:
    labels: { "project": "vr-nest", service: kafka }
  kafka-1-metadata:
    labels: { "project": "vr-nest", service: kafka }
  kafka-2:
    labels: { "project": "vr-nest", service: kafka }
  kafka-2-metadata:
    labels: { "project": "vr-nest", service: kafka }

networks:
  vr:
    name: vr
    driver: bridge
    ipam:
      config:
        - subnet: 10.22.0.0/16
