name: Integration Tests DC

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  VR_BACK_IMAGE_NAME: vr-back

permissions:
  contents: read
  id-token: write

jobs:
  test:
    runs-on: ubuntu-latest

    # Service containers to run with the job
    services:
      postgres:
        image: postgres:17-bookworm
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps tcp port 5432 on service container to the host
          # We don't need to specify a host port; GitHub Actions maps it
          # and makes it accessible via the service label hostname ('postgres') on port 5432
          - 5432:5432

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Dev Docker image
        uses: docker/build-push-action@v5
        id: build_dev
        continue-on-error: false
        with:
          context: ./vr-back
          target: development
          push: false
          load: true
          tags: vr-back:development
          cache-from: type=gha # Enable GitHub Actions cache for Docker layers
          cache-to: type=gha,mode=max

      - name: Setup test db
        working-directory: ./vr-back
        env:
          DATABASE_HOST: localhost
          DATABASE_PORT: 5432
          DATABASE_USER: vr
          DATABASE_PASSWORD: deadbeef
          DATABASE_NAME: vr-back
        run: |
          docker compose ps
          pwd
          docker container ls --format 'table {{.ID}}\t{{.Image}}\t{{.Status}}\t{{.State}}\t{{.Names}}\t{{.Networks}}'
          bash ./scripts/setup-test-db.sh

      - name: Run integration tests
        working-directory: ./vr-back
        run: |
          docker container run \
            --network=host \
            -e DATABASE_HOST=localhost \
            -e DATABASE_PORT=5432 \
            -e DATABASE_USER=vr \
            -e DATABASE_PASSWORD=deadbeef \
            -e DATABASE_NAME=vr-back \
            ${{ steps.build_dev.outputs.imageid }} npm run test

      # Authenticate to Google Cloud AFTER tests pass
      - name: Authenticate to Google Cloud
        id: auth
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}

      # Configure Docker to use gcloud credential helper
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      # Configures the Docker client to use gcloud credentials
      # (obtained via WIF in the previous step) to authenticate with GAR Docker repositories.
      # It takes a comma-separated list of GAR hostnames (format LOCATION-docker.pkg.dev).
      - name: Authorize Docker push
        run: gcloud auth configure-docker ${{ secrets.GAR_LOCATION }}-docker.pkg.dev

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.GAR_LOCATION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.GAR_REPOSITORY }}/${{ env.VR_BACK_IMAGE_NAME }}
          tags: |
            type=sha # Add Git SHA tag
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }} # Add latest tag only for main branch

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./vr-back # Path to the vr-back directory
          target: production # Build the production stage from Dockerfile
          push: true # Push the image
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha # Enable GitHub Actions cache for Docker layers
          cache-to: type=gha,mode=max
